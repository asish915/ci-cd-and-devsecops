name: CI/CD automation and deployment

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_KEY: ${{ secrets.EC2_KEY }}
  KUBECONFIG: ${{ secrets.KUBECONFIG }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  terraform:
    name: automate terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Initialising terraform
        run: terraform init

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan 

      - name: Terraform Apply
        run: terraform apply -auto-approve 

  tfsec:
    name: tfsec scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.0

  trivy:
    name: Trivy Scan (Docker Image)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t asish915/vite-app:latest -f vite-app/Dockerfile vite-app

      - name: Push Docker Image
        run: docker push asish915/vite-app:latest

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: asish915/vite-app:latest
          format: table
          exit-code: 0
          ignore-unfixed: true
          
  sealed-secrets:
    name: Apply Sealed Secrets
    needs: [trivy]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install kubeseal
        run: |
          wget https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.24.5/kubeseal-0.24.5-linux-amd64.tar.gz
          tar -xvf kubeseal-0.24.5-linux-amd64.tar.gz
          sudo install kubeseal /usr/local/bin/kubeseal

      - name: Set up Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_BASE64 }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Wait for Controller to be Ready
        run: kubectl rollout status deployment/sealed-secrets-controller -n sealed-secrets --timeout=120s

      - name: Apply Sealed Secrets
        run: kubectl apply -f k8s/sealed-secret.yaml

      - name: Deploy App to Kubernetes
        run: |
          kubectl apply -f k8s/manifests/deployment.yaml
          kubectl apply -f k8s/manifests/service.yaml

deploy:
    runs-on: ubuntu-latest
    needs: [terraform, tfsec, trivy]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies and build
        working-directory: vite-app
        run: |
          npm install
          npm run build

      - name: Zip build output
        run: |
          cd vite-app/dist
          zip -r ../../vite-app.zip .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload zip to S3 bucket
        run: aws s3 cp vite-app.zip s3://${{ secrets.S3_BUCKET }}/vite-app.zip

      - name: Prepare SSH Key
        run: |
          echo "${{ secrets.EC2_KEY }}" | base64 -d > ec2-key.pem
          chmod 600 ec2-key.pem

      - name: Deploy to EC2 instance
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          echo "Deploying application on EC2 instance"
            sudo yum install -y unzip aws-cli
            aws s3 cp s3://${{ secrets.S3_BUCKET }}/vite-app.zip /home/${{ secrets.EC2_USER }}/vite-app.zip
            unzip -o /home/${{ secrets.EC2_USER }}/vite-app.zip -d /home/${{ secrets.EC2_USER }}/vite-app
            sudo rm -rf /usr/share/nginx/html/*
            sudo cp -r /home/${{ secrets.EC2_USER }}/vite-app/* /usr/share/nginx/html/
            sudo systemctl restart nginx
          EOF
